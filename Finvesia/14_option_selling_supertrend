from NorenRestApiPy.NorenApi import NorenApi
from flask import Flask, request
import TFU_Class2c  # Same filename of your login python file
import pandas as pd
import re
import threading
from queue import Queue
import requests
import threading
from queue import Queue
import time


app = Flask(__name__)

class ShoonyaApiPy(NorenApi):
    def __init__(self):
        NorenApi.__init__(self, host='https://api.shoonya.com/NorenWClientTP/',
                          websocket='wss://api.shoonya.com/NorenWSTP/',
                          eodhost='https://api.shoonya.com/chartApi/getdata/')
        
api = TFU_Class2c.api
# BUY SELL OR COMMENT FOR BOTH  BUY_SELL  BUY  SELL

buy_or_sell_flag = "C_SELL P_SELL"
previous_symbol =   None
entry_price = None
previous_quantity = None
fst_target = None
fst_target_order_no = None
target_percent = 0.90
sl_percent = 1.09
closePrice = None


fst_order_limit_entry = 1.07
sl_target_limit_entry =0.93


stop_event = threading.Event()


loop = False
#quantity should be multiple of 100
default_quantiy= 100
last_postion = "HALF"
stock = "NIFTY"
# -VE      IN THE MONEY
# 0  ATM
# +VE     OUT THE MONEY
otm = 0

expiry = {
    "year": "23",
    "month": "JUN",
    "day": "08"
    # "year": "23",
    # "month": "MAR",
    # "day": "09"
}

my_information = {
                    'NFO:NIFTY08JUN23C18650':   'NFO|45578',
                    'NFO:NIFTY08JUN23P18650':   'NFO|45579',

                    'NFO:NIFTY08JUN23C18600':   'NFO|50574',
                    'NFO:NIFTY08JUN23P18600':   'NFO|45575',

                    'NFO:NIFTY08JUN23C18550':   'NFO|45572',
                    'NFO:NIFTY08JUN23P18550':   'NFO|45573',

                    'NFO:NIFTY08JUN23C18500':   'NFO|45570',
                    'NFO:NIFTY08JUN23P18500':   'NFO|45571',

#------------------------------------------------------------------------
                    'NFO:NIFTY08JUN23C18700':   'NFO|45587',
                    'NFO:NIFTY08JUN23P18700':   'NFO|45589',

                    'NFO:NIFTY08JUN23C18750':   'NFO|45600',
                    'NFO:NIFTY08JUN23P18750':   'NFO|45602',

                    'NFO:NIFTY08JUN23C18800':   'NFO|45614',
                    'NFO:NIFTY08JUN23P18800':   'NFO|45615',

                    'NFO:NIFTY08JUN23C18850':   'NFO|45618',
                    'NFO:NIFTY08JUN23P18850':   'NFO|45619',

                    'NFO:NIFTY08JUN23C18450':   'NFO|45560',
                    'NFO:NIFTY08JUN23P18450':   'NFO|45563',

                    'NFO:NIFTY08JUN23C18400':   'NFO|45558',
                    'NFO:NIFTY08JUN23P18400':   'NFO|45559',

#----------------------------------------------------------------------

                    
                    'NSE:NIFTY':'NSE|26000',
                    'NSE:BANKNIFTY':'NSE|26009'
  }

##################################################

def getLTP_websocket(exch,token):
    print(" getLTP_websocket() ")
    if exch == None:
        exch='NFO'
    instrument = exch+":"+token
    instrument = my_information[instrument]
    url = "http://localhost:4002/ltp?instrument=" + instrument
    resp = None
    try:
        resp = requests.get(url)
    except Exception as e:
        print(e)
    if resp is not None:
        data = resp.json()
        #print("data"+ str(data))
        return data
    
    else:
        return None

def findStrikePriceATM(type,stock):
    global closePrice
    print(" findStrikePriceATM  ")

    #TO get feed to Nifty: "NSE:NIFTY 50" and banknifty: "NSE: NIFTY BANK"
    strikeList=[]
    prev_diff = 10000
    closest_Strike=10000
    intExpiry=expiry["day"]+expiry["month"]+expiry["year"]   #22OCT
    ######################################################
    #FINDING ATM
    if closePrice is not None:
        ltp = closePrice
    else:
        ltp = float(getLTP_websocket("NSE" ,stock))
        
    print(f" {stock} ==> {ltp}")

    if stock == "BANKNIFTY":
        closest_Strike = int(round((ltp / 100),0) * 100)
        print(closest_Strike)
    elif stock == "NIFTY":
        closest_Strike = int(round((ltp / 50),0) * 50)
        print(closest_Strike)

    print("closest",closest_Strike)
    closest_Strike_CE = closest_Strike+otm
    closest_Strike_PE = closest_Strike-otm

    if stock == "BANKNIFTY":
        atmCE = "BANKNIFTY" + str(intExpiry)+"C"+str(closest_Strike_CE)
        atmPE = "BANKNIFTY" + str(intExpiry)+"P"+str(closest_Strike_PE)
    elif stock == "NIFTY":
        atmCE = "NIFTY" + str(intExpiry)+"C"+str(closest_Strike_CE)
        atmPE = "NIFTY" + str(intExpiry)+"P"+str(closest_Strike_PE)
    if type == "C_SELL":
        return atmCE
    if type == "P_SELL":
        return atmPE

@app.route('/os1', methods=['GET'])
def health():
    return 'ok'

@app.route('/os_set', methods=['GET', 'POST'])
def set_value():
    
    global previous_symbol , previous_orderNo, previous_quantity, not_freash_trade, default_quantiy,fst_target, fst_target_order_no,sl_target,loop,last_postion,entry_price
    loop = False
    not_freash_trade = "OLD"
    alert_data = request.get_json()

    options_symbol = alert_data.get('options_symbol')
    quantity = alert_data.get('quantity')
    new_default_quantiy = alert_data.get('default_quantity') 
    new_fst_target = alert_data.get('fst_target') 
    new_fst_target_order_no = alert_data.get('fst_target_order_no') 
    new_sl_target = alert_data.get('sl_target')
    new_entry_price = alert_data.get('entry_price') 

    #print("PREVIOUS SYMBOL "+options_symbol+" QUANTITY "+str(quantity)+  "FIRST TARGET "+ str(new_fst_target) +"new_fst_target_order_no"+str(new_fst_target_order_no)+"new_default_quantiy "+ str(new_default_quantiy))
           
    if options_symbol != None:
        previous_symbol= options_symbol
    if quantity != None:
        previous_quantity = quantity
    if new_default_quantiy != None:
        default_quantiy = new_default_quantiy
    if new_fst_target != None:
        fst_target = new_fst_target
    if new_fst_target_order_no != None:
        fst_target_order_no = new_fst_target_order_no
    if new_sl_target != None:
        sl_target = new_sl_target
    if new_sl_target != None:
        entry_price = new_sl_target

    if options_symbol is not None:
        print("PREVIOUS SYMBOL: " + options_symbol, end=" ")
    if quantity is not None:
        print("QUANTITY: " + str(quantity), end=" ")
    if new_fst_target is not None:
        print("FIRST TARGET: " + str(new_fst_target), end=" ")
    if new_fst_target_order_no is not None:
        print("FST TARGET ORDER NO: " + str(new_fst_target_order_no), end=" ")
    if new_default_quantiy is not None:
        print("NEW DEFAULT QUANTITY: " + str(new_default_quantiy), end=" ")
    if new_sl_target is not None:
        print("NEW SL : " + str(new_sl_target), end=" ")
    if new_entry_price is not None:
        print("NEW ENTRY PRICE : " + str(new_entry_price), end=" ")
    print()

    # for starting the loop again
    last_postion = "FULL" 
    loop = True
    start_thread_for_target_Sl()
    return "OK"


@app.route('/os_add', methods=['GET', 'POST'])
def buy_sell_qunatity():
    global previous_symbol, previous_message , previous_orderNo, previous_quantity, not_freash_trade
    not_freash_trade = "OLD"
    alert_data = request.get_json()
    symbol = alert_data.get('symbol')
    new_quantity = alert_data.get('quantity')
    message = alert_data.get('message') 
    # we are considering nifty only
    if previous_message == None and previous_orderNo == None and previous_quantity == None and previous_symbol == None:
        return Exception ("NO TRADE IS ACTIVE  NOT ABLE TO MODIFY IT")
    match = re.search(symbol, previous_symbol)
    if match:
        nifty_term = match.group()
        print(previous_symbol+" ARE GOING TO SELL QUANTITY "+new_quantity)
    else:
        return Exception(previous_symbol+"  AND  "+symbol +"  SYMBOL ARE NOT MATCHED ")
    order_id = placeOrder(symbol=previous_symbol, buy_or_sell=message, quantity=new_quantity,price=0,order_type="MARKET")
    get_status_of_order(order_id)
    previous_quantity = previous_quantity- new_quantity
    previous_orderNo = order_id
    not_freash_trade = "NEW"
    return "ABLE TO " + message  +" " +symbol+ "  WITH QUANTITY "+new_quantity



@app.route('/os', methods=['GET', 'POST'])
def receive_webhook():
    global previous_symbol, previous_message , previous_orderNo,loop, closePrice

    # CLOSING THE ALREADY RUNNIG EXIT_HALF() LOOP
    loop = False



    alert_data = request.get_json()
    symbol = alert_data.get('symbol')
    message = alert_data.get('message')
    quantity = alert_data.get('quantity')
    interval = alert_data.get('interval')
    closePrice = alert_data.get('close')
    timenow = alert_data.get('timenow')
    
    #print("symbol: " + symbol + ", message: " + message + ", interval: " + interval + ", closePrice: " + closePrice + ", timenow: " + timenow)

    variables = {'symbol': symbol, 'message': message, 'interval': interval, 'closePrice': closePrice, 'timenow': timenow}
    none_variables = [name for name, value in variables.items() if value is None]

    if none_variables:
        none_variable_names = ', '.join(none_variables)
        print(f"The following variable(s) have a value of None: {none_variable_names}")
        #return f"The following variable(s) have a value of None: {none_variable_names}"
    
        #order is already there

    try:
        return get_exchange_Symbol_strikePrice_orderAreadyPlaced(symbol, message)
    except Exception as e:
        return "FAILED TO PLACE ORDER" + str(e)
    

def start_thread_for_target_Sl():
    thread = threading.Thread(target=exit_half)
    thread.start()

def exit_half():
    print(" exit_half() ")
    global previous_quantity, previous_symbol, entry_price, last_postion,fst_target, sl_target, loop,fst_target
    while loop :
        if last_postion == "FULL" and previous_symbol is not None and previous_quantity is not None:
            try:
               
                ltp = getLTP_websocket("NFO",previous_symbol)
                print("previous_symbol : "+str(previous_symbol)+" LTP     :"+str(ltp)+"      1ST TARGET : " +str(fst_target) + " SL : "+ str(sl_target))
                ltp = float(ltp)
                fst_target = float(fst_target)
                sl_target = float(sl_target)

                try:
                    if ltp <= fst_target:
                        order_id = placeOrder(previous_symbol, "BUY", (float(previous_quantity) / 2), 0, "MARKET")
                        status = get_status_of_order_for_exit_quantity(order_id)
                        if status == "COMPLETED":
                            last_postion = "HALF"
                            previous_quantity = str(float(previous_quantity) / 2)
                            stop_event.set()  # Set the stop_event to signal thread termination
                            break  # Exit the loop
                except Exception as e:
                    print(" NOT ABLE TO EXIT AT TAEGET ")
                    stop_event.set()  # Set the stop_event to signal thread termination
                    break  # Exit the loop
                try:
                    if ltp >= sl_target:
                        order_id = placeOrder(previous_symbol, "BUY", float(previous_quantity), 0, "MARKET")
                        status = get_status_of_order_for_exit_quantity(order_id)
                        if status == "COMPLETED":
                            previous_quantity = None
                            previous_symbol = None
                            last_postion= "HALF"
                            print(" STOPLOSS HIT  AT "+ltp)
                            stop_event.set()  # Set the stop_event to signal thread termination
                            break  # Exit the loop
                except Exception as e:
                     print("PLACE SL ORDER IMMIDEATLY ")                   
            except Exception as e:
                print("PROBLEM IN EXITING HALF QUANTITY :: " + str(e))
                stop_event.set()  # Set the stop_event to signal thread termination
                break  # Exit the loop
    print("EXIT THE TARGET SL LOOP")
    stop_event.set()  # Set the stop_event to signal thread termination
      # Exit the loop


                
def get_exchange_Symbol_strikePrice_orderAreadyPlaced(symbol, message):
    print(" Create two threads for method1 and method2 ")

    global previous_message, previous_symbol, loop

    # Create two threads for method1 and method2
    string1 = None
    string2 = None
    try:
        # Create a result queue
        result_queue = Queue()
        
        def exit_thread():
            print("inside exit_thread")
            nonlocal string1
            try:
                string1 = exit_order(symbol, message)
                result_queue.put(string1)  # Put the result in the queue
            except Exception as e:
                print(f"Exception occurred in exit_thread_1_fun  SELL ORDERc: {e}")
                return (f"Exception occurred in exit_thread SELL ORDER: {e}")
                #raise Exception(f" SELL ORDER : {e}")

        def entry_thread():
            print("inside entry_thread")
            nonlocal string2
            try:
                string2 = entry_order(symbol, message)
                result_queue.put(string2)  # Put the result in the queue
            except Exception as e:
                    print(f"Exception occurred in entry_thread BUY ORDER: {e}")
                    return (f"Exception occurred in entry_thread BUY ORDER: {e}")
            # Create thread objects

        exit_thread_1 = threading.Thread(target = exit_thread)
        entry_thread_1 = threading.Thread(target=entry_thread)

            # Start both threads
        
        exit_thread_1.start()
        time.sleep(0.01)
        entry_thread_1.start()
        
            # Join both threads
        exit_thread_1.join()
        entry_thread_1.join()

            # Get the results from the queue
        #string1 = result_queue.get()
        #string2 = result_queue.get()
        print("-----BOTH THREAD COMPLETED-----")

    except Exception as e:
        print(f"Exception occurred: {e}")

    # Join the strings
    joined_string = ""
    if string1 is not None and string2 is not None:
        joined_string = string1 + string2

    return joined_string


# BUY C_BUY AND P_SELL
# SYMBOL NIFTY
# SELL P_BUY AND C_SELL
# NIFTY01JUN23C19000
def exit_order(symbol, message):
    print(" exit_order () ")
    global previous_symbol,previous_quantity
    # both have same stock name
    # previous symbol have C or not
    # new message have sell siganl or not 
    if previous_symbol != None:
        # if previous_quantity == default_quantiy:
        #     api.cancel_order(fst_target_order_no)
        print("EXIT  ORDER WITH "+previous_symbol +" AND QUANTITY "+ str(previous_quantity))
        order_id = placeOrder(previous_symbol, "BUY", previous_quantity, 0,"MARKET")
        return get_status_of_order(order_id)
    
    else:
        print("PREVIOUS TRADE IS NOT ACTIVE : NO EXIT ORDER")
        return "PREVIOUS TRADE IS NOT ACTIVE : NO EXIT ORDER"


# OPtions BUY order 
def entry_order(symbol, message):
    print(" entry_order() ")  
    global previous_symbol, previous_quantity,last_postion, fst_target, fst_target_order_no,loop

    if "C_SELL" in message:
            if "C_SELL" in buy_or_sell_flag:
                option_symbol = findStrikePriceATM("C_SELL",symbol)
                print(option_symbol)
                order_id = placeOrder(option_symbol, "SELL", default_quantiy, 0,"MARKET")
                string1 =get_status_of_order(order_id)
                if(string1 == "COMPLETE"):
                     print(" ASSIGN VALUE IN CE ENTRY ORDER ")
                     # if order id completed than only set the previous_symbol, previous symbol, entry_price
                     #entrypreice set from get_status_of_order
                     previous_symbol = option_symbol
                     previous_quantity = default_quantiy
                     last_postion = "FULL"
                    # 1st target 
                     print(" TRYING TO PLACE 1ST TARGET ORDER FOR SYMBOL "+ previous_symbol+ " AT "+ str(fst_target))
                    #  fst_target_order_no = placeOrder(option_symbol, "SELL", default_quantiy/2, fst_target,"LIMIT")
                    #  get_status_of_order_for_exit_quantity(fst_target_order_no)
                    #  start_thread_for_target_Sl()
                     loop = True
                     start_thread_for_target_Sl()
                     print(" ORDER COMPLETE WITH "+previous_symbol+ " AND QUANTITY "+str(previous_quantity) +" LAST POSTION FLAG "+last_postion )
                # i want to call a method which run in background check ltp is reaches to 1.1*entry_price it shold print exit half quantity
                return string1
            raise Exception("CE  :: ENTRY IS NOT THERE IN THE FLAG")
    
    if  "P_SELL" in message:
            if "P_SELL" in buy_or_sell_flag:
                option_symbol = findStrikePriceATM( "P_SELL",symbol)
                print(option_symbol)
                order_id = placeOrder(option_symbol, "SELL", default_quantiy, 0,"MARKET")
                string1 =get_status_of_order(order_id)
                if(string1 == "COMPLETE"):
                     print(" ASSIGN VALUE IN PE BUY ORDER ")
                     # if order id completed than only set the previous_symbol, previous symbol, entry_price
                     #entrypreice set from get_status_of_order
                     previous_symbol = option_symbol
                     previous_quantity = default_quantiy
                     last_postion = "FULL" 
                     print(" ORDER COMPLETE WITH "+previous_symbol+ " AND QUANTITY "+str(previous_quantity) +" LAST POSTION FLAG "+last_postion )
                    
                    # 1st target 
                     print(" TRYING TO PLACE 1ST TARGET ORDER FOR SYMBOL "+ previous_symbol+ " AT "+ str(fst_target))
                    #  fst_target_order_no = placeOrder(option_symbol, "SELL", default_quantiy/2, fst_target,"LIMIT")
                    #  get_status_of_order_for_exit_quantity(fst_target_order_no)
                    #  start_thread_for_target_Sl
                     loop = True
                     start_thread_for_target_Sl()


                # i want to call a method which run in background check ltp is reaches to 1.1*entry_price it shold print exit half quantity
                return string1
            raise Exception("PE :: BUYING IS NOT THERE IN THE FLAG")
    else:
        print("OPTION SYMBOL NOT FOUND FOR THE GIVEN SYMBOL AND MESSAGE.")

def getLTP(symbol):
    print(" getLTP() ")
    try:
        print("inside getLtp")
        print("exch: NFO, token: " + symbol)
        ret = api.get_quotes(exchange="NFO", token=symbol)
        print("exch: NFO, token: " + symbol + " LTP IS "+str(float(ret['lp'])))
        return float(ret['lp'])
    except Exception as e:
        print(symbol, "INVALID SYMBOL : {}".format(e))


def get_status_of_order(orderNo):
    print(" get_status_of_order() ")
    global entry_price, fst_target,sl_target, target_percent, sl_percent
    a = api.get_order_book()
    orderbook = pd.DataFrame(a)
    rejected_orders = orderbook.loc[orderbook["norenordno"] == str(orderNo)]
    
    for index, order in rejected_orders.iterrows():
        print("status:", order["status"])
        if order["status"] == "COMPLETE":
            print("ORDER COMPLETE " + order["status"] + " price " + order["avgprc"])
            entry_price =  order["avgprc"]

            fst_target = float(target_percent) * float(order["avgprc"])
            fst_target =  format(fst_target, ".1f")

            sl_target = float(sl_percent) * float(order["avgprc"])
            sl_target =  format(sl_target, ".1f")
           

            print("ENTRY PRICE "+str(order["avgprc"] )+ " TARGET IS  "+str(fst_target ))
            return  order["status"]
        if order["status"] == "REJECTED":
            print("ORDER HAS BEEN REJECTED PLEASE ADD NEW ORDER")
            raise Exception("ORDER HAS BEEN REJECTED PLEASE ADD NEW ORDER")
    raise Exception("RETURN NO ORDER IN THE ORDER-BOOK WITH ORDER NUMBER " + orderNo)  # Return None if the order is not found in the order book

def get_status_of_order_for_exit_quantity(orderNo):
    print(" get_status_of_order_for_exit_quantity() ")
    global previous_quantity, last_postion
    a = api.get_order_book()
    orderbook = pd.DataFrame(a)
    rejected_orders = orderbook.loc[orderbook["norenordno"] == str(orderNo)]
    for index, order in rejected_orders.iterrows():
        print("status:", order["status"])
        if order["status"] == "COMPLETE":
            print("ORDER COMPLETE " + order["status"] + " price " + order["avgprc"])
            previous_quantity = previous_quantity/2
            last_postion = "HALF"
            return  order["status"]
        if order["status"] == "REJECTED":
            print("ORDER HAS BEEN REJECTED PLEASE ADD NEW ORDER")
            return order["status"]
        if order["status"] == "PENDING":
            print("ORDER HAS BEEN ADDED")
            return order["status"]
        if order["status"] == "OPEN":
            print("ORDER HAS BEEN OPEN  ")
            return order["status"]
    raise Exception("RETURN NO ORDER IN THE ORDER-BOOK WITH ORDER NUMBER " + orderNo) 

def placeOrder(symbol, buy_or_sell, quantity, price,order_type):
    global previous_symbol, previous_message, previous_quantity,previous_orderNo
    print("PLACE ORDER :: exchangeName: NFO, Symbol: " + symbol + ", buy_or_sell: " + buy_or_sell + ", quantity: " + str(quantity) + ", price: " + str(price) +"order_type"+order_type)

    # BUY SELL OR COMMENT FOR BOTH  BUY_SELL  BUY  SELL

    amo = "regular"    
    symb = symbol
    paperTrading = 0
    if buy_or_sell == "BUY":
        buy_or_sell = "B"
    else:
        buy_or_sell = "S"

    if order_type == "MARKET":
        order_type = "MKT"
        trigger_price = price
    elif order_type == "LIMIT":
        order_type = "LMT"
    else:
        order_type = "LMT"



    try:
        if paperTrading == 0:
                order_id = api.place_order(buy_or_sell=buy_or_sell,
                                        product_type="M",
                                        exchange="NFO",
                                        tradingsymbol=symb,
                                        quantity=quantity,
                                        discloseqty=quantity,
                                        price_type=order_type,
                                        price=price,
                                        trigger_price=price,
                                        amo=amo,
                                        retention="DAY")
                print(" => ", symb, order_id['norenordno'])   
                previous_orderNo  = order_id['norenordno']
                return order_id['norenordno']     
        else:
                order_id = 0
                return order_id
    except Exception as e:
                raise Exception("NOT ABLE TO PLACE THE ORDER: ", e)

# Main program starts here
if __name__ == '__main__':
    # Create and start the thread
    # Start your Flask app
    app.run()